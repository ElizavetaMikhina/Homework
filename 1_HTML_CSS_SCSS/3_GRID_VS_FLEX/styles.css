@charset "UTF-8";
@import url("https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap");
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Open Sans", sans-serif;
}

.grid-container__title {
  text-align: center;
  position: relative;
}
.grid-container__cards-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin: 20px;
}
.grid-container__card {
  background-color: #f0f0f0;
  padding: 20px;
  text-align: left;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  min-width: 200px;
}
.grid-container__subtitle {
  font-size: 18px;
  margin-bottom: 10px;
}
.grid-container__description {
  font-size: 12px;
}

/* Для реализации стилей как на макете (рястягивании при переносе элемента на новую строку)
    раскладка Grid не совсем подходит, т.к. суть грида заключается в том, что это именно сетка, и для того,
    чтобы растянуть элементы перенесенные на новую строку необходимо задавать жесткие размеры.

    Для примера привожу ниже использование медиа-запросов и псевдоселекторов. С их помощью можно реализовать
    раскладку как в макете. Однако, я считаю этот метод костыльным, и для данного макета следует использовать Flex.
*/
/*
@media (max-width: 1120px) {
    .grid-container__card:last-of-type {
        grid-column: 1 / -1;
    }
}
*/
.flex-container__title {
  text-align: center;
  position: relative;
}
.flex-container__cards-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin: 20px;
}
.flex-container__card {
  flex: 1 1 200px;
  background-color: #f0f0f0;
  padding: 20px;
  text-align: left;
  border-radius: 5px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  min-width: 200px;
}
.flex-container__subtitle {
  font-size: 18px;
  margin-bottom: 10px;
}
.flex-container__description {
  font-size: 12px;
}/*# sourceMappingURL=styles.css.map */